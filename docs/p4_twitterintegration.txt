    A lot of interesting things can come from short snippets of text, 
as anybody with a texting partner knows. So, we're going to use twitter for our
first cut of authentication. Coincidentally, my first prototype also used twitter
so I know these APIs pretty well, so let's get started. 

You want to have at least two accounts, one to run the application and one to 
login to make sure that it works. 

1. Visit apps.twitter.com and create a new app for testing

Configure the following properties per the twitter4j documentation, but do it
in the categorizeus.properties.
TWITTER_CONSUMER_KEY=thekey
TWITTER_CONSUMER_SECRET=thesecret
TWITTER_ACCESS_TOKEN=theaccesstoken
TWITTER_ACCESS_SECRET=theaccesstokensecret


<-- Deprecated
 Create a new file in the current directory for categorize.us called
twitter4j.properties, it should look like this:
debug=true
oauth.consumerKey=*********************
oauth.consumerSecret=******************************************
oauth.accessToken=**************************************************
oauth.accessTokenSecret=******************************************
-->

3. Click keys and access tokens on apps.twitter.com you will find two sections
one for the consumer Key and Secret, one for the access token and secret for 
your user. 

Paste these values into twitter4j.properties

4. Now, we will run a simple, standalone test class to verify that we have
access, all the files are in the right place and the right location etc. 
If you have problems with this step, please create an Issue here:
https://github.com/categorizeus/categorizeus/issues
So that I can address your problem, this all works for me. If I find common

Run mvn clean compile from core
verify target/classes has got the categorizeus.properties and twitter4j.properties
e.g.
:~/categorizeus/core$ ls target/classes/
categorizeus.properties  sql  twitter4j.properties  us
cd target/classes
Run checkTwitter.sh, which will verify twitter connectivity.
You should see something like below [1], but with your timeline. 

Note that you CANNOT just run
java -cp . us.categorize.integration.TwitterVerify
Because we need to get maven dependenices into the classpath. 
At this point, you've successfully created a twitter application, good job!


#REMEMBERTOUPDATE <-- this tag is for sections that are going to likely rapidly change
5. Now, let's take a look at accessing the categorizeus API from java using 
twitter data. 



#REMEMBERTOUPDATE
[1]
:~/categorizeus/core$ ./checkTwitter.sh 
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building core 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- exec-maven-plugin:1.6.0:java (default-cli) @ core ---
Hey Look I'm a class act
Showing @YOURSN's home timeline.
    
    You should see stuff you recognize here


[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.159 s
[INFO] Finished at: 2017-06-10T23:27:58+00:00
[INFO] Final Memory: 13M/33M
[INFO] ------------------------------------------------------------------------


